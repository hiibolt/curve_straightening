/**
 * @brief Generates the initial vertices on the ellipsoid.
 * 
 * @param m Number of vertices.
 * @param c Array of size 3 x (m + 2) to store the vertices.
 * 
 * @note The vertices are stored in the array c as follows:
 * c[0][j] = x-coordinate of the j-th vertex,
 * c[1][j] = y-coordinate of the j-th vertex,
 * c[2][j] = z-coordinate of the j-th vertex.
 * 
 * @note The first vertex is repeated at the end of the array to simplify the
 *       computation of the normal vectors.
 * 
 * @note The vertices are generated by the parametric equations:
 *       x = ax * cos(theta) * sin(phi),
 *       y = ay * sin(theta) * sin(phi),
 *       z  = az * cos(phi),
 *       where theta = 2 * pi * (j - 1) / m and phi = pi * (j - 1) / m.
 * 
 * @note The resulting vertices are stored in the array c.
*/
pub fn initc (
    m: usize,
    c: &mut Vec<Vec<f64>>,
) {
    let eps = 0.09;
    let ax = 1.0;
    let ay = 1.0 - eps;
    let az = 0.25;

    for j in 1..=m {
        let theta = 2.0 * std::f64::consts::PI * (j as f64 - 1.0f64) / (m as f64);
        let phi = std::f64::consts::PI * (j as f64 - 1.0f64) / (m as f64);

        c[0][j] = ax * theta.cos() * phi.sin();
        c[1][j] = ay * theta.sin() * phi.sin();
        c[2][j] = az * phi.cos();
    }

    // Copy the last point to the first point.
    c[0][0] = c[0][m];
    c[1][0] = c[1][m];
    c[2][0] = c[2][m];
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_initc() {
        let m = 400;
        let mut c: Vec<Vec<f64>> = vec![
            vec![0.0; m + 2],
            vec![0.0; m + 2],
            vec![0.0; m + 2]
        ];
    
        initc(m, &mut c);
    
        assert_eq!(c[0][0], 0.007852931972449488);
        assert_eq!(c[1][0], -0.00011226097918906943);
        assert_eq!(c[2][0], -0.24999228941119742);
    }
}